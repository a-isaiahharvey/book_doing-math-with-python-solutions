#+title: Chapter 3
#+subtitle: Describing Data With Statistics
#+author: Allister Isaiah Harvey
#+property: header-args:python :python python3
#+startup: showeverything
#+options: toc:3

* Challenge 1 - Better Correlation Coefficient–Finding Program

The ~find_corr_x_y()~ function we wrote earlier to find the correlation coefficient between two sets of numbers assumes that the two sets of numbers are the same length. Improve the function so that it first checks the length of the lists. If they’re equal, only then should the function proceed with the remaining calculations; otherwise, it should print an error message that the correlation can’t be found.

#+begin_src python :tangle 3_1.py
  def find_corr_x_y(x,y):

      if len(x) != len(y):
          print('The two sets of numbers are of unequal size')
          return None

      n = len(x)
    
      # find the sum of the products
      prod = [xi*yi for xi, yi in zip(x, y)]
      sum_prod_x_y = sum(prod)

      # sum of the numbers in x
      sum_x = sum(x)
      # sum of the numbers in y
      sum_y = sum(y)

      # square of the sum of the numbers in x
      squared_sum_x = sum_x**2
      # square of the sum of the numbers in y
      squared_sum_y = sum_y**2

      # find the squares of numbers in x and the
      # sum of the squares
      x_square = [xi**2 for xi in x]
      x_square_sum = sum(x_square)

      # find the squares of numbers in y and the
      # sum of the squares
      y_square = [yi**2 for yi in y]
      y_square_sum = sum(y_square)

      # numerator
      numerator = n*sum_prod_x_y - sum_x*sum_y
      denominator_term1 = n*x_square_sum - squared_sum_x
      denominator_term2 = n*y_square_sum - squared_sum_y
      denominator = (denominator_term1*denominator_term2)**0.5

      correlation = numerator/denominator

      return correlation

  def generate_data(m, n):
      x = range(0, m)
      y = [4*xi for xi in range(0, n)]
      return x, y

  if __name__=='__main__':
      x, y = generate_data(10, 10)
      corr = find_corr_x_y(x,y)
      if not corr:
          print('Correlation correlation could not be calculated')
      else:
          print('The correlation coefficient between x and y is {0}'.format(corr))

      x, y = generate_data(10, 11)
      corr = find_corr_x_y(x,y)
      if not corr:
          print('Correlation correlation could not be calculated')
      else:
          print('The correlation coefficient between x and y is {0}'.format(corr))
#+end_src

* Challenge 2 - Statistics Calculator

Implement a statistics calculator that takes a list of numbers in the file /mydata.txt/ and then calculates and prints their mean, median, mode, variance, and standard deviation using the functions we wrote earlier in this chapter.

#+begin_src python :tangle 3_2.py
  from stats import mean, median, mode, variance_sd

  def read_data(filename):
      numbers = []
      with open(filename) as f:
          for line in f:
              numbers.append(float(line))

      return numbers

  if __name__=='__main__':
      data = read_data('mydata.txt')
      m = mean(data)
      median = median(data)
      mode = mode(data)
      variance, sd = variance_sd(data)
      print('Mean: {0:.5f}'.format(m))
      print('Median: {0:.5f}'.format(median))
      print('Mode: {0:.5f}'.format(mode))
      print('Variance: {0:.5f}'.format(variance))
      print('Standard deviation: {0:.5f}'.format(sd))
#+end_src

* Challenge 3 - Experiment with Other CSV Data

You can experiment with numerous interesting data sources freely available on the Internet. The website http://www.quandl.com/ is one such source. For this challenge, download the following data as a CVS file from http://www.quandl.com/WORLDBANK/USA_SP_POP_TOTL/: the total population of the United States at the end of each year for the years 1960 to 2012. Then, calculate the mean, median, variance, and standard deviation of the difference in population over the years and create a graph showing these differences.

#+begin_src python :tangle 3_3.py
  import matplotlib.pyplot as plt
  import csv
  from stats import mean, median, variance_sd

  def read_csv(filename):

      years = []
      population = []

      with open(filename) as f:
          reader = csv.reader(f)
          next(reader)

          summer = []
          highest_correlated = []
          for row in reader:
              # Extract only the year from
              # date
              year = row[0].split('-')[0]
              years.append(year)
              population.append(float(row[1]))
      # reverse the lists sice the original data lists the
      # most recent years first
      population = population[::-1]
      years = years[::-1]

      return population, years

  def plot_population(population, years):
    
      plt.figure(1)
      xaxis_positions = range(0, len(years))
      plt.plot(population, 'r-')
      plt.title('Total population in US')
      plt.xlabel('Year')
      plt.ylabel('Population')
      plt.xticks(xaxis_positions, years, rotation=45)

  def calculate_stats(population):

      # find the growth in population in consecutive years
      growth = []
      for i in range(0, len(population)-1):
          growth.append(population[i+1] - population[i])
      print('Mean growth: {0:.5f}'.format(mean(growth)))
      print('Median growth: {0:.5f}'.format(median(growth)))
      print('Variance/Sd growth: {0:.5f}, {1:.5f}'.format(*variance_sd(growth)))
      return growth
    
  def plot_population_diff(growth, years):

      xaxis_positions = range(0, len(years)-1)
      xaxis_labels = ['{0}-{1}'.format(years[i], years[i+1])
                      for i in range(len(years)-1)]
      plt.figure(2)
      plt.plot(growth, 'r-')
      plt.title('Population Growth in consecutive years')
      plt.ylabel('Population Growth')
      plt.xticks(xaxis_positions, xaxis_labels, rotation=45)

  if __name__ == '__main__':
      population, years = read_csv('USA_SP_POP_TOTL.csv')
      plot_population(population, years)
      growth = calculate_stats(population)
      plot_population_diff(growth, years)
      plt.show()
#+end_src

* Challenge 4 - Finding the Percentile

The percentile is a commonly used statistic that conveys the value below which a given percentage of observations falls. For example, if a student obtained a 95 percentile score on an exam, this means that 95 percent of the students scored less than or equal to the student’s score. For another example, in the list of numbers 5, 1, 9, 3, 14, 9, and 7, the 50th percentile is 7 and the 25th percentile is 3.5, a number that is not present in the list.

There are a number of ways to find the observation corresponding to a given percentile, but here’s one approach.
Let’s say we want to calculate the observation at percentile $p$:

1. In ascending order, sort the given list of numbers, which we might call data.
2. Calculate $i = \frac{np}{100} + 0.5$, where $n$ is the number of items in data.
3. If ~i~ is an integer, data[i] is the number corresponding to percentile $p$.
4. If /i/ is not an integer, set /k/ equal to the integral part of /i/ and /f/ equal to the fractional part of /i/. The number ~(1-f)*data[k] + f*data[k+1]~ is the number at percentile $p$.

Using this approach, write a program that will take a set of numbers in a file and display the number that corresponds to a specific percentile supplied as an input to the program.

#+begin_src python :tangle 3_4.py
  def find_percentile_score(data, percentile):
      if percentile < 0 or percentile > 100:
          return None
      data.sort()
      if percentile == 0:
          return data[0]
      if percentile == 100:
          return data[-1]
      n = len(data)
      i = ((n*percentile)/100) + 0.5

      if i.is_integer():
          real_idx = int(i-1)
          return data[real_idx]
      else:
          k = int(i)
          f = i - k
          real_idx_1 = k - 1
          real_idx_2 = k 
          return (1-f)*data[real_idx_1] + f*data[real_idx_2]

  def read_data(filename):
      numbers = []
      with open(filename) as f:
          for line in f:
              numbers.append(float(line))
      return numbers

  if __name__ == '__main__':
      percentile = float(input('Enter the percentile score you want to calculate: '))
      data = read_data('marks.txt')
      percentile_score = find_percentile_score(data, percentile)
      if percentile_score:
          print('The score at {0} percentile: {1}'.format(percentile, percentile_score))
      else:
          print('Could not find the score corresponding to {0} percentile'.format(percentile))
#+end_src

* Challenge 5 - Creating a Grouped Frequency Table

For this challenge, your task is to write a program that creates a grouped frequency table from a set of numbers. A grouped frequency table displays the frequency of data classified into different classes. For example, let’s consider the scores we discussed in “Creating a Frequency Table” on page 69: 7, 8, 9, 2, 10, 9, 9, 9, 9, 4, 5, 6, 1, 5, 6, 7, 8, 6, 1, and 10. A grouped frequency table would display this data as follows:

| Grade | Frequency |
|-------+-----------|
|   1-6 |         6 |
|  6-11 |        14 |

The table classifies the grades into two classes: 1–6 (which includes 1 but not 6) and 6–11 (which includes 6 but not 11). It displays against them the number of grades that belong to each category. Determining the number of classes and the range of numbers in each class are two key steps involved in creating this table. In this example, I’ve demonstrated two classes with the range of numbers in each class equally divided between the two.
Here’s one simple approach to creating classes, which assumes the number of classes can be arbitrarily chosen:

#+begin_src python
  def create_classes(numbers, n):
      low = min(numbers)
      high = max(numbers)

      # Width of each class
      width = (high - low)/n
      classes = []
      a = low
      b = low + width
      classes = []
      while a < (high-width):
          classes.append((a, b)) a= b
          b = a + width
      # The last class may be of a size that is less than width
      classes.append((a, high+1))
      return classes
#+end_src

The ~create_classes()~ function accepts two arguments: a list of numbers, ~numbers~, and ~n~, the number of classes to create. It’ll return a list of tuples with each tuple representing a class. For example, if it’s called with numbers 7, 8, 9, 2, 10, 9, 9, 9, 9, 4, 5, 6, 1, 5, 6, 7, 8, 6, 1, 10, and $n = 4$, it returns the following list: [(1, 3.25), (3.25, 5.5), (5.5, 7.75), (7.75, 11)]. Once you have the list, the next step is to go over each of the numbers and find out which of the returned classes it belongs to.
Your challenge is to write a program to read a list of numbers from a file and then to print the grouped frequency table, making use of the ~create_classes()~ function.

#+begin_src python :tangle 3_5.py
  def create_classes(numbers, n):
      low = min(numbers)
      high = max(numbers)

      # width of each class
      width = (high - low)/n
      classes = []
      a = low
      b = low + width
      classes = []
      while a < (high-width):
          classes.append((a, b))
          a = b
          b = a + width
      # The last class may be of size
      # less than width
      classes.append((a, high+1))
      return classes

  def classify(numbers, classes):
      # Create a list with the same number of elements
      # as the number of classes
      count = [0]*len(classes)
      for n in numbers:
          for index, c in enumerate(classes):
              if n >= c[0] and n < c[1]:
                  count[index] += 1
                  break
      return count

  def read_data(filename):
      numbers = []
      with open(filename) as f:
          for line in f:
              numbers.append(float(line))
      return numbers

  if __name__ == '__main__':
    
      num_classes = int(input('Enter the number of classes: '))
      numbers = read_data('marks.txt')
    
      classes = create_classes(numbers, num_classes)
      count = classify(numbers, classes)
      for c, cnt in zip(classes, count):
          print('{0:.2f} - {1:.2f} \t {2}'.format(c[0], c[1], cnt))
#+end_src
