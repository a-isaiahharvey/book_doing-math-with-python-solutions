#+title: Chapter 5
#+subtitle: Playing with Sets and Probability
#+author: Allister Isaiah Harvey
#+property: header-args:python :python python3
#+startup: showeverything
#+options: toc:3

* Challenge 1 - Using Venn Diagrams to Visualize Relationships Between Sets

A /Venn diagram/ is an easy way to see the relationship between sets graphically. It tells us how many elements are common between the two sets, how many elements are only in one set, and how many elements are in neither set. Consider a set, $A$, that represents the set of positive odd numbers less than 20—that is, $A = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19}$ —and consider another set, $B$, that represents the set of prime numbers less than 20—that is,
$B = {2, 3, 5, 7, 11, 13, 17, 19}$. We can draw Venn diagrams with Python using the ~matplotlib_venn~ package (see Appendix A for installation instructions for this package). Once you’ve installed it, you can draw the Venn diagram as follows:

#+begin_src python
  '''
  Draw a Venn diagram for two sets
  '''

  from matplotlib_venn import venn2
  import matplotlib.pyplot as plt
  from sympy import FiniteSet

  def draw_venn(sets):
      venn2(subsets=sets)
      plt.show()

  if __name__ == '__main__':

      s1 = FiniteSet(1, 3, 5, 7, 9, 11, 13, 15, 17, 19)
      s2 = FiniteSet(2, 3, 5, 7, 11, 13, 17, 19)

      draw_venn([s1, s2])
#+end_src

Once we import all the required modules and functions (the ~venn2()~ function, ~matplotlib.pyplot~, and the ~FiniteSet~ class), all we have to do is create the two sets and then call the ~venn2()~ function, using the subsets keyword argument to specify the sets as a tuple.
Figure 5-4 shows the Venn diagram created by the preceding program. The sets $A$ and $B$ share seven common elements, so 7 is written in the com- mon area. Each of the sets also has unique elements, so the number of unique elements—3 and 1, respectively—is written in the individual areas. The labels below the two sets are shown as $A$ and $B$. You can specify your own labels using the ~set_labels~ keyword argument:

#+begin_example
>>> venn2(subsets=(a,b), set_labels=('S', 'T'))
#+end_example

This would change the set labels to S and T.

For your challenge, imagine you’ve created an online questionnaire asking your classmates the following question: /Do you play football, another sport, or no sports?/ Once you have the results, create a CSV file, /sports.csv/, as follows:

#+begin_example
StudentID,Football,Others
1,1,0
2,1,1
3,0,1
--snip--
#+end_example

Create 20 such rows for the 20 students in your class. The first column is the student ID (the survey isn’t anonymous), the second column has a 1 if the student has marked “football” as the sport they love to play, and the third column has a 1 if the student plays any other sport or none at all. Write a program to create a Venn diagram to depict the summarized results of the survey, as shown in Figure 5-5.

Depending on the data in the sports.csv file you created, the numbers in each set will vary. The following function reads a CSV file and returns two lists corresponding to the IDs of those students who play football and other sports:

#+begin_src python
  def read_csv(filename):
      football = []
      others = []
      with open(filename) as f:
          reader = csv.reader(f)
          next(reader)
          for row in reader:
              if row[1] == '1':
                  football.append(row[0])
              if row[2] == '1':
                  others.append(row[0])

      return football, others
#+end_src

#+begin_src python :tangle 5_1.py
  from sympy import FiniteSet
  from matplotlib_venn import venn2
  import matplotlib.pyplot as plt
  import csv

  def read_csv(filename):

      football = []
      others = []

      with open(filename) as f:
          reader = csv.reader(f)
          next(reader)
          for row in reader:
              if row[1] == '1':
                  football.append(row[0])
              if row[2] == '1':
                  others.append(row[0])

      return football, others


  def draw_venn(f, o):
      venn2(subsets=(f, o), set_labels=('Football', 'Others'))
      plt.show()

  if __name__ == '__main__':
      football, others = read_csv('sports.csv')
      f = FiniteSet(*football)
      o = FiniteSet(*others)
      draw_venn(f, o)
#+end_src

* Challenge 2 - Law of Large Numbers

We’ve referred to a die roll and coin toss as two examples of random events that we can simulate using random numbers. We’ve used the term /event/ to refer to a certain number showing up on a die roll or to heads or tails showing up on a coin toss, with each event having an associated probability value. In probability, a /random variable/ — usually denoted by X—describes an event. For example, $X = 1$ describes the event of 1 appearing upon a die roll, and $P(X = 1)$ describes the associated probability. There are two kinds of random variables: (1) /discrete/ random variables, which take only integral values and are the only kind of random variables we see in this chapter, and (2) /continuous/ random variables, which—as the name suggests—can take any real value.
The /expectation/, /E/, of a discrete random variable is the equivalent of the average or mean that we learned about in Chapter 3. The expectation can be calculated as follows: $E = x_1 P(x_1) + x_2 P(x_2) + x_3 P(x_3) + \dotsb + x_n P(x_n)$
Thus, for a six-sided die, the expected value of a die roll can be calculated
like this:

#+begin_example
>>> e = 1*(1/6) + 2*(1/6) + 3*(1/6) + 4*(1/6) + 5*(1/6) + 6*(1/6)
>>> e
3.5
#+end_example

According to the /law of large numbers/, the average value of results over multiple trials approaches the expected value as the number of trials increases. Your challenge in this task is to verify this law when rolling a six-sided die for the following number of trials: 100, 1000, 10000, 100000, and 500000. Here’s an expected sample run of your complete program:

#+begin_example
Expected value: 3.5
Trials: 100 Trial average 3.39
Trials: 1000 Trial average 3.576
Trials: 10000 Trial average 3.5054
Trials: 100000 Trial average 3.50201
Trials: 500000 Trial average 3.495568
#+end_example

#+begin_src python :tangle 5_2.py
  import random

  def roll(num_trials):
      rolls = []
      for t in range(num_trials):
          rolls.append(random.randint(1, 6))
      return sum(rolls)/num_trials

  if __name__ == '__main__':
      expected_value = 3.5
      print('Expected value: {0}'.format(expected_value))
      for trial in [100, 1000, 10000, 100000, 500000]:
          avg = roll(trial)
          print('Trials: {0} Trial average {1}'.format(trial, avg))
#+end_src

* Challenge 3 - How Many Tosses Before You Run Out of Money?

Let’s consider a simple game played with a fair coin toss. A player wins $1 for heads and loses $1.50 for tails. The game is over when the player’s balance reaches $0. Given a certain starting amount specified by the user as input, your challenge is to write a program that simulates this game. Assume there’s an unlimited cash reserve with the computer—your opponent here. Here’s a possible game play session:

#+begin_example
Enter your starting amount: 10
Tails! Current amount: 8.5
Tails! Current amount: 7.0
Tails! Current amount: 5.5
Tails! Current amount: 4.0
Tails! Current amount: 2.5
Heads! Current amount: 3.5
Tails! Current amount: 2.0
Tails! Current amount: 0.5
Tails! Current amount: -1.0
Game over :( Current amount: -1.0. Coin tosses: 9
#+end_example

#+begin_src python :tangle 5_3.py
import random

def play(start_amount):

    win_amount = 1
    loss_amount = 1.5

    cur_amount = start_amount
    tosses = 0

    while cur_amount > 0:
        tosses += 1
        toss = random.randint(0, 1)
        if toss == 0:
            cur_amount += win_amount
            print('Heads! Current amount: {0}'.format(cur_amount))
        else:
            cur_amount -= loss_amount
            print('Tails! Current amount: {0}'.format(cur_amount))
    print('Game over :( Current amount: {0}. Coin tosses: {1}'.format(cur_amount, tosses))

if __name__ == '__main__':
    start_amount = float(input('Enter your starting amount: '))
    play(start_amount)

#+end_src

* Chapter 4 - Shuffling a Deck of Cards

Consider a standard deck of 52 playing cards. Your challenge here is to write a program to simulate the shuffling of this deck. To keep the implementation simple, I suggest you use the integers 1, 2, 3, . . . , 52 to represent the deck. Every time you run the program, it should output a shuffled deck—in this case, a shuffled list of integers.
Here’s a possible output of your program:

#+begin_example
[3, 9, 21, 50, 32, 4, 20, 52, 7, 13, 41, 25, 49, 36, 23, 45, 1, 22, 40, 19, 2,
35, 28, 30, 39, 44, 29, 38, 48, 16, 15, 18, 46, 31, 14, 33, 10, 6, 24, 5, 43,
47, 11, 34, 37, 27, 8, 17, 51, 12, 42, 26]
#+end_example

The random module in Python’s standard library has a function, ~shuffle()~, for this exact operation:

#+begin_example
>>> import random
>>> x = [1, 2, 3, 4]
>>> random.shuffle(x)
>>> x
[4, 2, 1, 3]
#+end_example

Create a list, x, consisting of the numbers ~[1, 2, 3, 4]~. Then, call the ~shuffle()~ function (1), passing this list as an argument. You’ll see that the numbers in x have been shuffled. Note that the list is shuffled “in place.” That is, the original order is lost.
But what if you wanted to use this program in a card game? There, it’s not enough to simply output the shuffled list of integers. You’ll also need a way to map back the integers to the specific suit and rank of each card. One way you might do this is to create a Python class to represent a single card:

#+begin_src python
  class Card:
      def __init__(self, suit, rank):
          self.suit = suit
          self.rank = rank
#+end_src

To represent the ace of clubs, create a card object, ~card1 = Card('clubs', 'ace')~. Then, do the same for all the other cards. Next, create a list consisting of each of the card objects and shuffle this list. The result will be a shuffled deck of cards where you also know the suit and rank of each card. Output of the program should look something like this:

#+begin_example
10 of spades
6 of clubs
jack of spades
9 of spades
#+end_example

#+begin_src python :tangle 5_4.py
  import random

  class Card:
      def __init__(self, suite, rank):
          self.suite = suite
          self.rank = rank
        
  def initialize_deck():
      suites = ['Clubs', 'Diamonds', 'Hearts', 'Spades']
      ranks = ['Ace', '2', '3','4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']
      cards = []
      for suite in suites:
          for rank in ranks:
              card = Card(suite, rank)
              cards.append(card)
      return cards

  def shuffle_and_print(cards):
      random.shuffle(cards)
      for card in cards:
          print('{0} of {1}'.format(card.rank, card.suite))
    
  if __name__ == '__main__':
      cards = initialize_deck()
      shuffle_and_print(cards)
#+end_src

* Challenge 5 - Estimating the Area of a Circle

Consider a dartboard with a circle of radius r inscribed in a square with side $2r$. Now let’s say you start throwing a large number of darts at it. Some of these will hit the board within the circle—let’s say, N—and others outside it—let’s say, M. If we consider the fraction of darts that land inside the circle, $f = \frac{N}{N+M}$ then the value of $f × A$, where $A$ is the area of the square, would roughly be equal to the area of the circle (see Figure 5-6). The darts are represented by the small circular dots in the figure. We shall refer to the value of $f × A$ as the estimated area. The actual area is, of course, $πr^2$.
As part of this challenge, write a program that will find the estimated area of a circle, given any radius, using this approach. The program should print the estimated area of the circle for three different values of the number of darts: $10^3, 10^5, and 10^6$. That’s a lot of darts! You’ll see that increasing the number of darts brings the estimated area close to the actual area. Here’s a sample output of the completed solution:

#+begin_example
Radius: 2
Area: 12.566370614359172, Estimated (1000 darts): 12.576
Area: 12.566370614359172, Estimated (100000 darts): 12.58176
Area: 12.566370614359172, Estimated (1000000 darts): 12.560128
#+end_example

The dart throw can be simulated by a call to the ~random.uniform(a, b)~ function, which will return a random number between $a$ and $b$. In this case, use the values $a = 0, b = 2r$ (the side of the square).

** Estimating the Value of Pi

Consider Figure 5-6 once again. The area of the square is $4r^2$, and the area of the inscribed circle is $πr^2$. If we divide the area of the circle by the area of the square, we get $π/4$. The fraction f that we calculated earlier, $f = \frac{N}{N + M}$ is thus an approximation of π/4, which in turn means that the value of $4 \frac{N}{N + M}$ should be close to the value of $π$. Your next challenge is to write a program that will estimate the value of $π$ assuming any value for the radius. As you increase the number of darts, the estimated value of $π$ should get close to the known value of the constant.

#+begin_src python :tangle 5_5.py
  import math
  import random

  def estimate(radius, total_points):
      center = (radius, radius)

      in_circle = 0
      for i in range(total_points):
          x = random.uniform(0, 2*radius)
          y = random.uniform(0, 2*radius)
          p = (x, y)
          # distance of the point created from circle's center
          d = math.sqrt((p[0]-center[0])**2 + (p[1]-center[1])**2)
          if d <= radius:
              in_circle += 1
      area_of_square = (2*radius)**2
      return (in_circle/total_points)*area_of_square

  if __name__ == '__main__':
      radius = float(input('Radius: '))
      area_of_circle = math.pi*radius**2
      for points in [10**3, 10**5, 10**6]:
          print('Area: {0}, Estimated ({1}): {2}'.format(area_of_circle, points, estimate(radius, points)))
#+end_src
